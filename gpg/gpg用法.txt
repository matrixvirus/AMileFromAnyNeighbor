1
	2018年02月27日。
	参考书是gpg文档。
	我的系统是openSUSE-Leap-42.3,gpg版本2.0.24。
2 
2.1 制作钥对
	$ gpg --gen-key
	请选择您要使用的密钥种类：
	   (1) RSA and RSA (default)
	   (2) DSA and Elgamal
	   (3) DSA (仅用于签名)
	   (4) RSA (仅用于签名)
	您的选择？ 

	名词缩写：
	DSA Digital Signature Algorithm
	RSA 是发明者三人名字缩写
	这里不讲这些算法是什么，只讲怎么用gpg这个软件。

	选择1 制作两对钥对，RSA主钥对用于签名，RSA 副钥对用于加密。
	选择2 制作两对钥对，DSA主钥对用于签名，Elgamal副钥对用于加密
	选择3 制作一个DSA钥对，用于签名
	选择4 制作一个RSA钥对，用于签名

	___________________________________________
	您的选择？ 1
	RSA 密钥长度应在 1024 位与 4096 位之间。
	您想要用多大的密钥尺寸？(2048)
	___________________________________________

	后面的依次按提示填。最后要指定密码，这个密码不是必须的，可以输入空，如果你的
	私钥落入别人手中，这个密码是最后一层保障。

	最后输出
	___________________________________________________________________
	gpg: 正在检查信任度数据库
	gpg: 需要 3 份勉强信任和 1 份完全信任，PGP 信任模型
	gpg: 深度：0 有效性：  4 已签名：  0 信任度：0-，0q，0n，0m，0f，4u
	pub   2048D/84A0D639 2018-03-01
	密钥指纹 = A46D 469C 051B 9EA0 F5FE  C4CA 799D A3DC 84A0 D639
	uid       [ 绝对 ] abc (Address) <archimedes_newton@163.com>
	sub   2048g/50A8A3AA 2018-03-01
	___________________________________________________________________


	删除公钥
	$ gpg --delete-key 84A0D639
	删除私钥
	$ gpg --delete-secret-key 84A0D639
	
2.2 列出钥
	 列出公钥
	$ gpg --list-keys
	pub   2048D/84A0D639 2018-03-01
	uid       [ 绝对 ] abc (Address) <archimedes_newton@163.com>
	sub   2048g/50A8A3AA 2018-03-01

	输出第1行，文档没有解释每个字段什么意思，pub意思是public，2048是钥长，
		2048右边的D是DSA算法的意思，
		84A0D639是这个钥对的标志，叫Key ID，以后的命令都要用这个作
		为参数指定是哪个钥对。
	第2行 uid是User ID 的意思，2048右边的g是Elgamal算法的意思。
	第3行 sub 是subordinate(附属的)的意思。

	--list-keys和--list-public-keys一样

	列出私钥
	$ gpg --list-secret-keys

	产生易于被编程处理的输出
	$ gpg --list-keys --with-colons

	以长格式显示标志
	$ gpg --list-keys --keyid-format long
	--keyid-format 的默认值是shorta。
2.3 制作撤回证明
	制作钥对后应立即为主公钥制作一个撤回证明，如果你忘了密码或者私钥丢了，你需要
	公布撤回证明以告知他人你的公钥不能再用了。一个被撤回的公钥仍可以用于确认你以
	前作的签名，但不可以再用于加密给你发的信息。这不影响你用私钥解密已经发给你的
	信息。
	$ gpg --output revoke.asc --gen-revoke 84A0D639
	
	--gen-revoke 右边的84A0D639 是制作钥对时最后输出的那一行，
	_______________________________
	pub   2048D/84A0D639 2018-03-01
	_______________________________

	里中间那串字符，是主钥对的一个标志,用于具体指定哪个钥对。
	--gen-revoke 后面也可以跟邮箱，指所有所有者是这个邮箱的钥对。
	--output revoke.asc 指示输出到文件revoke.asc，否则是输出到stdout。
2.4 交换钥
2.4.1 
	导出公钥
	导出公钥然后可以发给别人。
	$ gpg --output alice.gpg --export 84A0D639
	--export 后面可跟钥标志，也可以跟邮箱，跟邮箱的话指第一个用这个邮箱注册的钥
	对 。
	上面命令输出的是二制格式，不能读，可以用--armor指定输出是ASCII格式
	$ gpg --armor --output alice.gpg --export 84A0D639
2.4.2
	导入公钥
	另一个人收到你发给他的公钥后。
	$ gpg --import alice.gpg
	然后检查
	$ gpg --list-keys

	导入后要一一确认
	$ gpg --edit-key 84A0D639

	检查钥对的指纹是否和发送者的一致
	Command>  fpr
	检查指纹还可以在执行命令
	$ gpg --fingerprint

	确认
	Command> sign
	检查
	Command> check
	退出
	Command> quit
	你必须先有自已的私钥才能确认。
3 加密和解密文件
	你想给鲁迅发信息，用鲁迅的公钥加密信息，发给鲁迅，鲁迅收到后用鲁迅的私钥解
	密。
	用标志为84A0D639的钥对的公钥加密叫doc的文件，输出为doc.gpg
	$ gpg --output doc.gpg --encrypt --recipient 84A0D639 doc

	解密。解密方必须有标志为84A0D639的钥对的私钥
	$ gpg --output doc --decrypt doc.gpg

	可以不用公钥加密，用对称密码加密
	$ gpg --output doc.gpg --symmetric doc
	解密时不需要对应的私钥，只要输密码
4 签名
	数字签名认证并时戳一个文件。打断一下，原文说timestamp，当动词用，timestamp
	一般作名词翻译为时间戳。如果这个文件后来被修改了，确认签名会失败。gpg自已
	发布源码包时就用这种签名。
	签名时用私钥，确认时用对应的公钥。
	使用签名能使你不能否认一个签名是你签的。
	
	$ gpg --output doc.sig --sign doc
	上的命令用的是你的默认私钥，可以指定用哪个私钥
	$ gpg --output doc.sig --sign doc -u 333ACF43

	要允许别人用你的私钥签名，要先导出你的私钥
	$ gpg --output MySecretKey.gpg --export-secret-keys 333ACF43
	别人导入你的私钥
	$ gpg --import MySecretKey.gpg

	有你的公钥的别人确认你的签名并解密出原文件
	$ gpg --output doc --decrypt  doc.sig
	
	不压缩，产生可读的签名文件
	$ gpg --output doc.asc --clearsign -u 333ACF43 doc

	产生一个单独的，不和原文件压在一起的签名文件
	$ gpg --output doc.sig --detach-sig doc
	确认时原文件要和签名文件一起
	$ gpg --verify doc.sig doc
	

5 管理钥对
5.1 查看
	一个钥对包括公钥和私钥，还有制作者信息，制作时间，过期时间等。
	$ gpg --edit-key 84A0D639
	_____________________________________________________________________
	私钥可用。

	pub  2048D/84A0D639  创建于：2018-03-01  有效至：永不过期  可用于：SC  
						 信任度：绝对        有效性：绝对
	sub  2048g/50A8A3AA  创建于：2018-03-01  有效至：永不过期  可用于：E   
	[ 绝对 ] (1). abc (Address) <archimedes_newton@163.com>

	gpg> 
	_____________________________________________________________________

	上面输出列出的是公钥。输出中有一行“私钥可用”。最左边一列，pub是public,sub是
	subordinate, 副,左数第2列，2048是长度，D是DSA，g是只能用于加密的Elgamal,如
	果是G,意思是能加密和签名的Elgamal,84A0D639是ID，
	最右边的'可用于：SC'意思是可用于签名，'可用于：E'意思是可用于加密。
	执行toggle在显示公钥或私钥间切换
	gpg> toggle
	它的输出的最左边的sec表示主私钥，sbb表示副私钥。

	以后要再次查看这个信息，执行list
	gpg> list
5.2 
	公钥里的邮件地址信息可能被窃改。可以用公钥对应的私钥加密这个公钥，叫自签名。
	包含用户信息的公钥可以当作一个证书。
	$ gpg --edit-key 0862D7C3
	gpg> check
	uid  abc (只用于签名DSA) <archimedes_newton@163.com>
	sig!3        0862D7C3 2018-03-01  [自身签名]
	
	说明这个公钥是自签名的。
5.3 吊销
	这里的吊销意思是往钥对里加一个吊销自签名，我也不知道什么意思。不是命令行的
	--gen-revoke。
	gpg> revkey

	一个钥对里的制作者信息,长这样的
	  abc (Address) <archimedes_newton@163.com>
	是用这个钥对自已的私钥自签名的，你可以撤消这个签名
	_________________________________________________________________
	gpg> revsig
	您已经为这些密钥 84A0D639 上的这些用户标识添加签名：
		 abc (Address) <archimedes_newton@163.com>
	   由您的密钥 84A0D639 于 2018-03-01 签名

	用户标识：“Address) <archimedes_newton@163.com>”
	由您的密钥 84A0D639 于 2018-03-01 签名
	要为这份签名生成一份吊销证书吗？(y/N)
	_________________________________________________________________
	再检查一下
	gpg> check	

5.4 更新过期时间
	$ gpg --edit-key 84A0D639
	gpg> expire

5.5 信任
	你刚收到别人的钥对时
	$ gpg --edit-key 333ACF43
	输出是这样
	________________________________________________________________________
	pub  2048R/333ACF43  created: 2018-01-26  expires: never       usage: SC  
                     trust: unknown       validity: unknown
	sub  2048R/9496E463  created: 2018-01-26  expires: never       usage: E   
	[ unknown] (1). opensuse <archimedes_newton@163.com>
	________________________________________________________________________
	第2行，'trust:unknown'

	你执行
	gpg> trust
	然后选择'i trust ultimately',输出变成这样
	________________________________________________________________________
	pub  2048R/333ACF43  created: 2018-01-26  expires: never       usage: SC  
                     trust: ultimate      validity: unknown
	sub  2048R/9496E463  created: 2018-01-26  expires: never       usage: E   
	________________________________________________________________________
	第2行，'trust: ultimate'。

5.6 改私钥密码
	$ gpg --edit-key 333ACF43
	gpg> passwd
5.7 
	$ gpg --edit-key 333ACF43
	执行help查看所有命令，可用的命令还有delete,disable,enable等。

6 关于产生钥对等待时间过长问题
	执行gpg --gen-key,有时在最后，说在产生大量随机字符，请敲敲键盘，动动鼠标，
	然后就卡着不动。
	比较在不同环境下执行gpg --gen-key时间长短
  1
	真机，openSUSE-Leap-42.3,KDE桌面，RSA和RSA，2048位，时间几秒。
  2
	伪机，CentOS-6.9,无桌面，RSA和RSA，2048位，等待1分钟后没有产生钥对。
  3
	伪机，CentOS-6.9,无桌面，RSA和RSA，1024位，等待1分钟后没有产生钥对。
  4 
	伪机，openSUSE-Leap-42.3,无桌面，RSA和RSA，2048,时间几秒。

	说明CentOS6.9有这个问题，一直出不来。
	我在出不来的CentOS6.9系统上，用了一个剧本
	#!/bin/bash
	while :
	do
		dd if=/dev/zero of=/abc bs=4M count=100
		rm abc
	done
	在gpg产生钥对时执行，不到3分钟，钥对产生完成了。说明持续大块的写文件有助于
	产生随机字符。

