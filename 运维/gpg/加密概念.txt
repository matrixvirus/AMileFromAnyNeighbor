1
	2018年02月28日。
	参考书是gpg文档。
	这里讲的只是概念，过程，没有涉及里层的数学。
2 对称加密
	加密和解密使用一个密钥，不存在公，私的概念。通信的双方需事先都知道这个密钥。
	比如3DES,Blowfish,IDEA。
	好的对称加密算法使安全性主要在密钥上，算法可以公开。
3 公钥加密
	对称加密有两个问题，一方把密钥发给另一方的过程中可能被拦截，二是N个人间互相
	通信，每对人间都需要一个密钥，一共要N(N-1)/2个。

	公钥加密方法是A把自已的公钥发给B,B用A的公钥加密信息，发给A,A用自已的私钥解
	密。	
	公钥加密方法不用担心公钥在传给另一方的过程中被拦截，公钥可以给任何人，任何有
	A的公钥的人都可能用A的公钥加密发给A的信息。只有私钥能解密，私钥在自已手里，
	不给任何人。
	N个人间互相通信需要每个人有自已的一个公私钥对，一共N个。

	公钥加密的理论基础是单向阱门(trapdoor)函数，单向函数正向计算很简单，反向计
	算很难，比如计算两个素数的乘积很简单，把一个数分解成两个素数之乘很难。单向
	阱门函数多个一个概念叫阱门，意思是，如果有点信息已知，则反向计算变得简单，
	比如把一个数分解成两个素数之乘，已经知道了其中一个素数，则计算另一个素数变
	得简单。假设一个公钥加密算法基于素数分解,公钥是一个合数，算法用这个合数加密
	一个信息，解密这个信息需要知道那个合数的素数因子，所以私钥是其中一个素数因
	子。
4 混合加密
	公钥加密的加密和解密过程比对称加密更费时。用接收方的公钥加密对称密钥，发给
	接收方，接收方用接收方的私钥解密出对称密钥，发送方用对称密钥加密后续的信息，
	接收方用对称密钥解密，叫混合加密。
	因为每次使用的对称密钥都不一样，所以这里的对称密钥又叫会话密钥。
	如果坏人破解了一次会话密钥，他只能解密用这个会话密钥加密的信息，
	不能解密后续变化了的会话密钥加密的信息。
5 数字签名
	乱麻（hash)函数是一种多对一函数，把输入映射到一个有限集合，通常是一群自然
	数，比如f(x)=0，把任何整数映射到0,是一个乱麻函数。

	一个文件的数字签名是把一个乱麻函数应用于这个文件的输出。所用的乱麻函数要有
	两个特性，一是两个不同的文件很难产生相同的值，二是很难根据值推导出原文件。
	
	一些公钥加密算法可以用于签名，这些算法的公钥可以当私钥用。
		打断一下，文件下面小写说比如RSA算法可以， Elgamal 不行。但是Elgamal能用
		于签名。
	签名者用他的私钥加密文件，别人用公钥解密这个
	文件。但是这种方法很慢。所以有些专门产生乱麻值的算法，比如SHA,MD5,它们算
	出一个乱麻值作为签名，其它人用同一个文件，一样的算法如果算出的乱麻值一样，
	则说明文件没有修改过。
	如果原文件和签名都被没有加密有发送，坏人可以拦截原文件和签名，
	用他自已的一个文件，和对应的签名发给接收方，接收方不知道。如果只有原文件被
	加密，坏人可以窃改签名，使接收方验证时失败。
	一般做法是签名方用签名方的私钥加密由乱麻函数产生的原文件的乱麻值，签名方用
	一样的乱麻函数计算原文件和乱麻值，和用签名方的公钥解密的签名方发给接收方的
	加密后的乱麻值比较。
	DSA是gpg主要使用的签名算法。
