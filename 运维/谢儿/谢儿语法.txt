1
	2018年02月24日。
	参考书式Linux Scripting Cookbook,一个印度人写的那本。
2 数学计算
2.1 let
	$ a=2
	$ let a++
	$ let a=a+2
	$ let a=2*a
2.2 
	$ a=$[2+3]
	$ b=$[a*2]
2.3 
	双括号的用法和上面的中括号一样
	$ a=$((2+3))
	$ b=$((a*2))
2.4 用expr
	$ a=`expr 3 + 3`
	或
	$ a=$(expr 3 + 3)
2.5 用bc
	$ a=`echo '4 * 2' | bc`
	计算数字8的二制
	$ echo 'obase=2;8' | bc
	计算二制'1000'等于十制多少
	$ echo 'ibase=2;1000' | bc
	计算八制的'21'等于二制多少
	$ echo 'ibase=2;obase=2;21' | bc
3 输入输出重定向
	重定向时0,1,2的意义
	0 stdin
	1 stdout
	2 stderr

	stderr转成stdout
	$ SomeCommand 2>&1

	隐茂stdout和stderr
	$ SomeCommand &>/dev/null

	重定向stderr到一个文件
	$ SomeCommand 2> FileName

	既正常输出stdout,又把stdout输出到一个文件
	$ SomeCommand | tee FileName

	读入文件
	$ cat < FileName
4 数组
4.1 普通数组
	$ a=(1 2 3 4)
	显示a的元素
	$ echo ${a[0]}
	$ echo ${a[1]}
	显示a的所有元素
	$ echo ${a[*]}
	给a添加第五个元素
	$ a[4]=100
	显示a的元素个数
	$ echo ${#a[*]}
	删除a的第五个元素
	$ a[4]=''
	查看a的索引
	$ echo ${!a[*]}
4.2 联想数组
	先要这么定义
	$ declare -A a
	$ a=([a]=11 [b]=22)
	往a里添加元素
	$ a[abc]=99
	查看a的所有元素
	$ echo ${a[*]}
	查看a的索引
	$ echo ${!a[*]}
5 命令别名
	定义ls命令等于3次ls
	$ alias ls='ls;ls;ls'
	取消上面的别名
	$ unalias ls

	查看有哪些别名
	$ alias
6 剧本语法
	剧本第一行都是
	#!/bin/bash
	注释是#
6.1 if
	if [ 1 -lt 2 ]
	then
		echo "i like you"
	elif [ 2 -lt 3 ]
	then
		echo "i like your mother"
	else
		echo "your father like me"
	fi	

	if 下面有then,elif下面有then,else下面没有then,最后是fi。
6.2 判断的语法
	上面的if 右边的中括号是判断，[ 1 -lt 2 ] 的意思是如果1比2小。
	你还可以写成这样
	if test 1 -lt 2
	所以它实际是一个命令叫test。
	[右边必须有一个空格，]左边必须有空格。	
	你可以在命令行上直接输[ 1 -lt 2 ]
	$ [ 1 -lt 2]
	再输
	$ echo $?
	0

	说明判断成功，1比2小。

	! 取反
	[ ! 1 -lt 2 ]
		1不比2小
	[ 1 -lt 2 -a 2 -lt 3 ]
		1比2小，且2比3小，-a是"且"的意思
	上面的没有括号，有时式子变复杂，要加括号成这样
	[[ (1 -lt 2) && (2 -lt 3) ]]
		1比2小，或2比3小
	[ 1 -lt 2 -o 2 -lt 3 ]
		1比2小，或2比3小，-o是"或"的意思
	[[ (1 -lt 2) || (2 -lt 3) ]]
		1 比2小，或2比3小。

	其它语法：
	-n "aaa"
		字串"aaa"的长度不为0
	-z "aaa"
		字串"aaa"的长度为0
	"aaa" = "aaa"
		两个字串相同
	"aaa" != "aaa"
		两个字串不同
	1 -eq 1
		两个数相等
	1 -ge 2
		大于或等于
	1 -gt 2
		大于
	1 -le 2
		小于或等于
	1 -lt 2
		小于
	1 -ne 2
		不等于
	-d "aaa"
		"aaa"是一个目录
	-e "aaa"
		存在"aaa"这个文件，可能是目录
	-h "aaa"
		"aaa"是一个链接
	还有很多不常用的，请看man手册。

6.3 case 语法
	case x in
	1) echo 1;
		;;
	2) echo 2;
		;;
	*)
		;;
	esac

	开头是case ，然后变量，in。
	1是一个可能值，右边跟括号，写成1)
	然后是语句，后面跟两个分号，
	*)是其它，
	最后是esac。
	

6.4 for 语法
6.4.1
	x从1到100
	for x in {1..100}
	do
		echo $x
	done

	x是a,b,c,d
	for x in a b c d
	do
		echo $x
	done

	x是a到z
	for x in {a..z}
	do
		echo $x
	done
	x是A到Z
	for x in {A..Z}
	do 
		echo $x
	done
6.4.2
	自定分隔符
	data="name,sex,rollno,location"
	oldIFS=$IFS
	IFS=,
	for x in $data
	do
		echo $x
	done
	IFS=$oldIFS

	不这么写的话，data的4个词是一个整体，IFS是系统设置分隔符的变量，是空格，把
	IFS设成逗号，data里的4个词可以被依次赋给x。
6.4.3
	for ((x=0;x<10;x++))
	do
		echo $x
	done
6.5 while 语法
	形式:
	while [ 1 -eq 1]
	do
		语句;
	done

	while 右边是判断，下一行是do，最后是done。

	跳出循环：
	while [ 1 -eq 1 ]
	do
		#跳出循环：
		if [ 1 -eq 1 ]
		then
			break;
		fi
		#跳过循环：
		if [ 1 -eq 1]
		then	
			continue;
		fi
	done
6.6 函数
	形式：
	function fun1()
	{
		语句;
	}

	例子：
	function fun1()
	{
		local a=$1
		shift
		local b=$1
		echo $#
		echo $@
		return 0
	}

	$1 是第1个参数。
	执行shift后，$1实际是第2个参数。
	local 意思是变量a只在函数内有效，在函数外不可见。
	$# 是函数参数个数
	$@ 是所有参数
	return 0 函数返回0，执行一个函数或命令后，用"echo $?"看到的是返回值。

	使用函数，函数名后面跟参数
	fun1 1 2
6.8 
	管道语法
	$ cmd1 | cmd2 | cmd3

	使a等于一个命令的输出
	$ a=`SomeCommand`

	使用一个新进程执行命令ls
	$ (ls)
6.9 判断的正则式
	[[ 1 =~ .* ]]
	两层中括号，使用"=~", 右边写正则式，不要带引号。
18 分离文件名后缀
	$ a=abc.txt
	输出abc
	$ echo ${a%.*} 
	输出txt
	$ echo ${a#*.}

	如果名字里有两个点号，abc.123.txt
	$ echo ${a#*.}
	会输出123.txt
	要正确输出最后的txt，写两个#
	$ echo ${a##*.}
	写两个%以输出abc
	$ echo ${a%%.*}
19 变量
	显示变量长度
	$ echo ${#a}

	显示a的第2到第5个字符。
	$ echo ${a:1:4}
