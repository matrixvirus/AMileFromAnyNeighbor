0
	2018年03月28日。
	目标读者是深圳市易信科技技术部同事，起因是我们计划用gitlab替代有道云作为一
	种文档协作方法。因为使用目标不是版本控制，所以对git的知识要求可以比一般程
	序员少一点，不需要掌握撤回，分支，标签，部分提交杂志查看技巧。
1 克隆远程仓库
	这里远程仓库是指github或gitlab的仓库。

	我们的gitlab服务机ip是192.168.3.136，在上网器访问地址https://192.168.3.136。

1.1 方法1:
    $ git clone 远程仓库地址 

	其中仓库地址有http和ssh两种，http的是这个样子
	https://192.168.3.136/yixin/WorkFileCoop.git	

	ssh的是这个样子
	git@192.168.3.136:yixin/WorkFileCoop.git

	其中http的是http还是https取决于仓库所在服务机的设置。

    http格式中，yixin是组名，它是一个组名还是用户名取决于在github/gitlab中这个
	库属于一个用户还是一个组，WorkFileCoop是库名。
    实际使用http格式时需要对上述地址做一些修改, 在IP前面加上用户名，和IP间用@分
	隔,变成这样
	https://archimedes@192.168.3.136/yixin/WorkFileCoop.git	
		    __________

	因为我们自已搭建的gitlab的https用的是自签名证书，克隆时不能用，请用ssh格式。
1.2 方法2:
    $ mkdir 仓库名 
    $ cd 上述建的目录 
    $ git init  

	为远程仓库地址设置一个别名，不一定必须是origin
    $ git remote add origin 远程仓库地址 

    如果上述命令的地址敲错了，可以这样修改
    $ git remote set-url origin 新远程仓库地址 

    检查设置的别名origin
    $ git remote show -n origin 
	其中-n参数跟别名，但是可以不写-n直接写别名。

	列出设置了哪些别名
	$ git remote show
1.3 git 的man手册查看方法
    命令行上，git后面跟的是子命令，比如要查git config的手册
    $ man git-config
    中间用减号连接。
2 设置名字和邮箱,
    $ git config --global user.name 名字 
    $ git config --global user.email 邮箱 

    取消设置一个值，使用--unset
    $ git config --global --unset user.name

    专门为本仓库设置一个用户名，而不是全局的，不加--global
    $ git config user.name 名字

    检查上述设置的用户名和邮箱
    $ git config --list 

    这里设置的名字和邮箱会作为提交时的身份，用git log查看提交历史时的Author部分 能看见名字和邮箱。

    github/gitlab会根据这里设置的邮箱把名字换成注册的这个邮箱对应的昵称，与这里
设置 的名字无关，比如，注册了一个用户叫socrates,昵称苏格拉底，邮箱 
archimedes_newton@163.com, 你在命令行上用git config 设置名字为me,邮箱为
archimedes_newton@163.com
,名字不一样，邮箱一样。有了一次提交后，在页面上看提交历史显示提交者是苏格 拉底.

3 公钥
   要使用ssh形式的远程仓库地址,要先设置钥对。

	生成公钥私钥
    $ ssh-keygen 
	然后按提示操作。

	上传公钥
    复制文件~/.ssh/id_rsa.pub的内容，登录github/gitlab, 找到用户设置->SSH keys, 有一个输入框，把刚复制的内容粘贴上，点按钮Add key。
     
4 
	这里曾经有内容，因为编辑，这里的内容删了。
5 上传一个文件
	在本地的库目录里，新建一个文件假设叫readme。

    用git status命令查看工作树状态，显示刚建的文件readme的是未跟踪。
    $ git status 

	往暂存区添加文件readme
    $ git add readme 
    注意如果readme不是一个文件，是一个目录，git add对空目录无效。

    再次用git status命令显示文件readme状态是新建
    $ git status 

	提交
    $ git commit -m "注释" 
    如果git commit 后面没跟-m参数注释，命令会调vim让你写注释.

    再次用git status命令显示工作树没有要提效的
    $ git status 

    用git log命令查看提交历史
    $ git log 

	删除
    $ git rm 文件名 
    $ git commit 

	上传
    $ git push origin master
    origin是远程主机名,master是远程分支名,命令意思是把当前本地仓库所在分支上传到origin代指的远程仓库的master分支。

9 拉取
	用远程仓库的master分支更新本地当前分支。
    $ git pull origin master 

	拉取同本地仓库另一个分支
    $ git pull . 另一分支名 
11 合并
11.1 合并后手动编辑冲突文件
    执行git pull,或git merge后，如果是手动编辑了冲突文件，编辑完后执行
    $ git add; $ git commit 
11.2 情景一，强制用另一个库覆盖当前库
    $ git fetch 远程主机 远程分支 
    $ git reset --hard FETCH_HEAD 
11.3 情景二，把本库另一分支合并到当前分支，有冲突时自动选择用自已的还是对方的版本
    有冲突时直接选择对方的版本，放弃自已的
    $ git merge 分支名 -X theirs 

    有冲突时直接选择自已的版本，丢弃对放的
    $ git merge 分支名 -X ours 
11.4 情景三，把远程某分支合并到本地当前分支，有冲突时自动选择用自已的还是对方的版本
    有冲突时直接选择对方的版本，放弃自已的
    $ git pull origin 远程分支名 -X theirs 

    有冲突时直接选择自已的版本，丢弃对方的
    $ git pull origin 远程分支名 -X ours 
11.5 情景四, 执行git pull 或git merge后，手动选择个别文件用自已的还是对方的
    $ git checkout --theirs 文件名 
    $ git add; $ git commit 

    在选择哪个版本前，查看自已版是什么样子，和对方版本，共同祖选版本是什么样子
    $ git show :1:文件名 # 显示共同祖先版本 
    $ git show :2:文件名 # 显示自已的版本 
    $ git show :3:文件名 # 显示对方的版本 
11.2.5 如果遇到报错，“拒绝合并无关的历史",
	加一个参数 --allow-unreleated-histories
	$ git pull origin master --allow-unreleated-histories

11.3 取消合并
11.3.1 合并还没提交
   $ git reset --hard HEAD 
   或
   $ git reset --merge 
   或
   $ git reset --hard ORIG_HEAD 
11.3.2  如果没有冲突的合并了, 或者手动提交了，上述三条命令不会把文件退到合并前
    $ git revert 提交的SHA -m 1

11.3.3 取消合并再次合并
    $ git revert 取消合并的那次提交

13 git log技巧
13.1
	只显示与文件client.py有关的提交
    $ git log -- client.py 

	只显示某个提交者的提交
    $ git log --committer=名字 

	显示最近地两次提交
    $ git log -2 

